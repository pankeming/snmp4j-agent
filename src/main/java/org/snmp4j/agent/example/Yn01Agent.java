package org.snmp4j.agent.example;

import org.snmp4j.MessageDispatcher;
import org.snmp4j.MessageDispatcherImpl;
import org.snmp4j.TransportMapping;
import org.snmp4j.agent.*;
import org.snmp4j.agent.cfg.EngineBootsCounterFile;
import org.snmp4j.agent.io.DefaultMOPersistenceProvider;
import org.snmp4j.agent.io.MOInput;
import org.snmp4j.agent.io.MOInputFactory;
import org.snmp4j.agent.io.prop.PropertyMOInput;
import org.snmp4j.agent.mo.DefaultMOFactory;
import org.snmp4j.agent.mo.MOFactory;
import org.snmp4j.agent.mo.util.VariableProvider;
import org.snmp4j.agent.request.Request;
import org.snmp4j.agent.request.RequestStatus;
import org.snmp4j.agent.request.SubRequest;
import org.snmp4j.agent.request.SubRequestIterator;
import org.snmp4j.log.JavaLogFactory;
import org.snmp4j.log.LogAdapter;
import org.snmp4j.log.LogFactory;
import org.snmp4j.mp.MPv3;
import org.snmp4j.security.SecurityProtocols;
import org.snmp4j.smi.*;
import org.snmp4j.transport.TransportMappings;
import org.snmp4j.util.ArgumentParser;
import org.snmp4j.util.ThreadPool;

import java.io.*;
import java.text.ParseException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

/**
 * The SampleAgent uses an {@link AgentConfigManager} instance to create a
 * minimal SNMP agent using the configuration defined by
 * <code>SampleAgentConfig.properties</code> in this package. That properties
 * file defines the initial content of the registered MIB objects of this agent
 * which may differ from the hard coded defaults.
 * <p>
 * In order to add a new MIB object, call <code>server.register(..)</code> or
 * replace the <code>Modules.java</code> file in this package by the
 * <code>Modules.java</code> generated by AgenPro for your MIB module(s).
 * <p>
 * The agent uses the Java logging framework to log messages.
 *
 * @author Frank Fock
 * @version 1.3.2
 */

public class Yn01Agent implements VariableProvider{

    static{
        LogFactory.setLogFactory(new JavaLogFactory());
    }

    private LogAdapter logger = LogFactory.getLogger(Yn01Agent.class);
    protected AgentConfigManager agent;
    protected MOServer server;
    private String configFile;
    private File bootCounterFile;

    //supported MIBs
    protected Yn01Module modules;
    protected Properties tableSizeLimits;

    public Yn01Agent(Map<String, List<?>> args){
        configFile = (String) ((List)args.get("C")).get(0);
        bootCounterFile = new File((String)((List)args.get("bc")).get(0));
        server = new DefaultMOServer();
        MOServer[] moServers = new MOServer[]{server};
        InputStream configInputStream = Yn01Agent.class.getResourceAsStream("SampleAgentConfig.properties");

        if(args.containsKey("cfg")){
            try{
                configInputStream = new FileInputStream((String) ArgumentParser.getValue(args,"cfg",0));
            }
            catch(FileNotFoundException ex1){
                ex1.printStackTrace();
            }
        }

        final Properties props = new Properties();

        try{
            props.load(configInputStream);
        }
        catch(IOException ex)
        {
            ex.printStackTrace();
        }
    MOInputFactory configurationFactory = new MOInputFactory() {
        @Override
        public MOInput createMOInput() {
            return new PropertyMOInput(props, (VariableProvider) Yn01Agent.this);
        }
    };

        InputStream tableSizeLimitsInputStream =
                Yn01Agent.class.getResourceAsStream("SampleAgentTableSizeLimits.properties");
        if (args.containsKey("ts")) {
            try {
                tableSizeLimitsInputStream =
                        new FileInputStream((String) ArgumentParser.getValue(args, "ts", 0));
            }
            catch (FileNotFoundException ex1) {
                ex1.printStackTrace();
            }
        }
        tableSizeLimits = new Properties();
        try {
            tableSizeLimits.load(tableSizeLimitsInputStream);
        }
        catch (IOException ex) {
            ex.printStackTrace();
        }

        MessageDispatcher messageDispatcher = new MessageDispatcherImpl();
        addListenAddresses(messageDispatcher,(List)args.get("address"));
        agent = new AgentConfigManager(new OctetString(MPv3.createLocalEngineID()),messageDispatcher,
                null,
                moServers,
                ThreadPool.create("Yn01Agent",3),
                configurationFactory,
                new DefaultMOPersistenceProvider(moServers, configFile),
                new EngineBootsCounterFile(bootCounterFile));
    }

    protected void addListenAddresses(MessageDispatcher md,List addresses){
        for(Iterator it = addresses.iterator();it.hasNext();){
        TransportMapping tm =
                TransportMappings.getInstance().createTransportMapping((Address) addresses);
        if(tm != null){
            md.addTransportMapping(tm);
        }
        else {
            logger.warn("No transport mapping available for address'" + addresses + "'.");

        }
    }
}

    public void run(){
        // initialize agent before registering our own modules
        agent.initialize();
        // this requires sysUpTime to be available.
        registerMIBs();
        // add proxy forwarder
        agent.setupProxyForwarder();
        // apply table size limits
        agent.setTableSizeLimits(tableSizeLimits);
        // now continue agent setup and launch it.
        agent.run();
    }

    /**
     * Get the {@link MOFactory} that creates the various MOs (MIB Objects).
     * @return
     *    a {@link DefaultMOFactory} instance by default.
     * @since 1.3.2
     */
    protected MOFactory getFactory(){
        return DefaultMOFactory.getInstance();
    }

    /**
     * Register your own MIB modules in the specified context of the agent.
     * The {@link MOFactory} provided to the <code>Modules</code> constructor
     * is returned by {@link #getFactory()}.
     */
    protected void registerMIBs(){
        try{
            modules = new Yn01Module(getFactory());
            modules.registerMOs(server,null);
            // Some alternatives
            // Register a scalar with your OID in your enterprise subtree:
            /*  MOScalar myScalar = new MOScalar(new OID(new int[] { 1,3,6,1,4,1,1,0 }),
                                       MOAccessImpl.ACCESS_READ_WRITE,
                                       new OctetString("myText"));

            server.register(myScalar, null);*/
            // Register a table with a string index and a single integer payload column
            // a row status column to
            /*DefaultMOTable myTable =
            new DefaultMOTable(new OID("<tableEntryOID>"),
                            new MOTableIndex(new MOTableSubIndex[] {
                                             new MOTableSubIndex(new OID("<indexObjectClassOID>"),
                                             SMIConstants.SYNTAX_OCTET_STRING, 1, 16) },
                                             true),
            new MOMutableColumn[] {
            new MOMutableColumn(1, SMIConstants.SYNTAX_INTEGER32,
                          MOAccessImpl.ACCESS_READ_CREATE,
                          new Integer32(10), true),
            new RowStatus(2)
            });
            server.register(myTable, null);*/
        }
        catch (DuplicateRegistrationException drex){
            logger.error("Duplicate registration:"+drex.getMessage()+"."+
                    "MIB object registration may be incomplete!",drex);
        }

    }

    @Override
    public Variable getVariable(String name) {
        OID oid;
        OctetString context = null;
        int pos = name.indexOf(':');
        if (pos >= 0) {
            context = new OctetString(name.substring(0, pos));
            oid = new OID(name.substring(pos+1, name.length()));
        }
        else {
            oid = new OID(name);
        }
        final DefaultMOContextScope scope =
                new DefaultMOContextScope(context, oid, true, oid, true);
        MOQuery query = new MOQueryWithSource(scope, false, this);
        ManagedObject mo = server.lookup(query);
        if (mo != null) {
            final VariableBinding vb = new VariableBinding(oid);
            final RequestStatus status = new RequestStatus();
            SubRequest req = new SubRequest() {
                private boolean completed;
                private MOQuery query;

                public boolean hasError() {
                    return false;
                }

                public void setErrorStatus(int errorStatus) {
                    status.setErrorStatus(errorStatus);
                }

                public int getErrorStatus() {
                    return status.getErrorStatus();
                }

                public RequestStatus getStatus() {
                    return status;
                }

                public MOScope getScope() {
                    return scope;
                }

                public VariableBinding getVariableBinding() {
                    return vb;
                }

                public Request getRequest() {
                    return null;
                }

                public Object getUndoValue() {
                    return null;
                }

                public void setUndoValue(Object undoInformation) {
                }

                public void completed() {
                    completed = true;
                }

                public boolean isComplete() {
                    return completed;
                }

                public void setTargetMO(ManagedObject managedObject) {
                }

                public ManagedObject getTargetMO() {
                    return null;
                }

                public int getIndex() {
                    return 0;
                }

                public void setQuery(MOQuery query) {
                    this.query = query;
                }

                public MOQuery getQuery() {
                    return query;
                }

                public SubRequestIterator<SubRequest> repetitions() {
                    return null;
                }

                public void updateNextRepetition() {
                }

                public Object getUserObject() {
                    return null;
                }

                public void setUserObject(Object userObject) {
                }

            };
            mo.get(req);
            return vb.getVariable();
        }
        return null;
    }

//    class DemoTableRowListener implements MOTableRowListener {
//        public void rowChanged(MOTableRowEvent event) {
//            if ((event.getType() == MOTableRowEvent.CREATE) ||
//                    (event.getType() == MOTableRowEvent.UPDATED)) {
//                // ignore
//                return;
//            }
//            // update counter
//            Counter32 counter = (Counter32)
//                    event.getRow().getValue(Snmp4jDemoMib.idxSnmp4jDemoEntryCol3);
//            if (counter == null) {
//                counter = new Counter32(0);
//                ((MOMutableTableRow)
//                        event.getRow()).setValue(Snmp4jDemoMib.idxSnmp4jDemoEntryCol3,
//                        counter);
//            }
//            counter.increment();
//            // update timestamp
//            TimeStamp timestamp = (TimeStamp)
//                    event.getTable().getColumn(Snmp4jDemoMib.idxSnmp4jDemoEntryCol4);
//            timestamp.update((MOMutableTableRow)event.getRow(),
//                    Snmp4jDemoMib.idxSnmp4jDemoEntryCol4);
//            // fire notification
//            Integer32 type =
//                    new Integer32(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.updated);
//            switch (event.getType()) {
//                case MOTableRowEvent.ADD:
//                    type.setValue(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.created);
//                    break;
//                case MOTableRowEvent.DELETE:
//                    type.setValue(Snmp4jDemoMib.Snmp4jDemoTableRowModificationEnum.deleted);
//                    break;
//            }
//            VariableBinding[] payload = new VariableBinding[2];
//            OID table = event.getTable().getOID();
//            OID updateCount = new OID(table);
//            updateCount.append(Snmp4jDemoMib.colSnmp4jDemoEntryCol3);
//            updateCount.append(event.getRow().getIndex());
//
//            OID modifyType = new OID(table);
//            modifyType.append(Snmp4jDemoMib.colSnmp4jDemoTableRowModification);
//            modifyType.append(event.getRow().getIndex());
//
//            payload[0] = new VariableBinding(updateCount, counter);
//            payload[1] = new VariableBinding(modifyType, type);
//            //modules.getSnmp4jDemoMib().snmp4jDemoEvent(
//            //     agent.getNotificationOriginator(), new OctetString(), payload);
//        }
//    }

    /**
     * Runs a sample agent with a default configuration defined by
     * <code>SampleAgentConfig.properties</code>. A sample command line is:
     * <pre>
     * -c SampleAgent.cfg -bc SampleAgent.bc udp:127.0.0.1/4700 tcp:127.0.0.1/4700
     * </pre>
     *
     * @param args
     *    the command line arguments defining at least the listen addresses.
     *    The format is <code>-c[s{=SampleAgent.cfg}] -bc[s{=SampleAgent.bc}]
     *    +ts[s] +cfg[s] #address[s<(udp|tcp):.*[/[0-9]+]?>] ..</code>.
     *    For the format description see {@link ArgumentParser}.
     */

    public static void main(String[] args){
        ArgumentParser parser =
                new ArgumentParser("-c[s{=SampleAgent.cfg}] -bc[s{=SampleAgent.bc}] "+
                        "+ts[s] +cfg[s]",
                        "#address[s<(udp|tcp):.*[/[0-9]+]?>] ..");
        Map commandLineParameters = null;
        try {
            args = new String[1];
            args[0] = "udp:0.0.0.0/161";
            commandLineParameters = parser.parse(args);
            Yn01Agent yn01Agent = new Yn01Agent(commandLineParameters);
            // Add all available security protocols (e.g. SHA,MD5,DES,AES,3DES,..)
            SecurityProtocols.getInstance().addDefaultProtocols();
            // configure system group:
            // Set system description:
            // sampleAgent.agent.getSysDescr().setValue("My system description".getBytes());
            // Set system OID (= OID of t
            // he AGENT-CAPABILITIES statement describing
            // the implemented MIB objects of this agent:
            // sampleAgent.agent.getSysOID().setValue("1.3.1.6.1.4.1....");
            // Set the system services
            //sampleAgent.agent.getSysServices().setValue(72);
            yn01Agent.run();
        } catch (ParseException e) {
           System.err.println(e.getMessage());
        }
    }
}





